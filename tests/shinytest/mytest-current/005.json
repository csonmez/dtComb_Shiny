{
  "input": {
    "calculate": 0,
    "chxAdvanced": false,
    "collapseExample": "AUC Table",
    "collapsePlot": null,
    "conflevel": 0.95,
    "cutoffmethod": "Youden",
    "dataInput": "2",
    "decimal": false,
    "decimal2": false,
    "direction": "auto",
    "event1": "",
    "event2": "",
    "fileSepDF": "2",
    "fileSepDF2": "4",
    "functions": "Linear Combination Methods",
    "generalTabSetPanel": "Analysis",
    "goButton": 1,
    "LinearCombinationMethodsLogisticRegressionResamplingmethod": "None",
    "LinearCombinationMethodsLogisticRegressionResamplingmethodBootstrapNumberofresamplingiterations": 10,
    "LinearCombinationMethodsLogisticRegressionResamplingmethodCrossvalidationNumberoffolds": 10,
    "LinearCombinationMethodsLogisticRegressionResamplingmethodRepeatedcrossvalidationNumberoffolds": 10,
    "LinearCombinationMethodsLogisticRegressionResamplingmethodRepeatedcrossvalidationNumberofrepeats": 5,
    "LinearCombinationMethodsMinimaxResamplingmethod": "None",
    "LinearCombinationMethodsMinimaxResamplingmethodBootstrapNumberofresamplingiterations": 10,
    "LinearCombinationMethodsMinimaxResamplingmethodCrossvalidationNumberoffolds": 10,
    "LinearCombinationMethodsMinimaxResamplingmethodRepeatedcrossvalidationNumberoffolds": 10,
    "LinearCombinationMethodsMinimaxResamplingmethodRepeatedcrossvalidationNumberofrepeats": 5,
    "LinearCombinationMethodsMinmaxResamplingmethod": "None",
    "LinearCombinationMethodsMinmaxResamplingmethodBootstrapNumberofresamplingiterations": 10,
    "LinearCombinationMethodsMinmaxResamplingmethodCrossvalidationNumberoffolds": 10,
    "LinearCombinationMethodsMinmaxResamplingmethodRepeatedcrossvalidationNumberoffolds": 10,
    "LinearCombinationMethodsMinmaxResamplingmethodRepeatedcrossvalidationNumberofrepeats": 5,
    "LinearCombinationMethodsPepeCaiLangtonResamplingmethod": "None",
    "LinearCombinationMethodsPepeCaiLangtonResamplingmethodBootstrapNumberofresamplingiterations": 10,
    "LinearCombinationMethodsPepeCaiLangtonResamplingmethodCrossvalidationNumberoffolds": 10,
    "LinearCombinationMethodsPepeCaiLangtonResamplingmethodRepeatedcrossvalidationNumberoffolds": 10,
    "LinearCombinationMethodsPepeCaiLangtonResamplingmethodRepeatedcrossvalidationNumberofrepeats": 5,
    "LinearCombinationMethodsPepeThompsonResamplingmethod": "None",
    "LinearCombinationMethodsPepeThompsonResamplingmethodBootstrapNumberofresamplingiterations": 10,
    "LinearCombinationMethodsPepeThompsonResamplingmethodCrossvalidationNumberoffolds": 10,
    "LinearCombinationMethodsPepeThompsonResamplingmethodRepeatedcrossvalidationNumberoffolds": 10,
    "LinearCombinationMethodsPepeThompsonResamplingmethodRepeatedcrossvalidationNumberofrepeats": 5,
    "LinearCombinationMethodsScoringNumberofdigit": 2,
    "LinearCombinationMethodsScoringResamplingmethod": "None",
    "LinearCombinationMethodsScoringResamplingmethodBootstrapNumberofresamplingiterations": 10,
    "LinearCombinationMethodsScoringResamplingmethodCrossvalidationNumberoffolds": 10,
    "LinearCombinationMethodsScoringResamplingmethodRepeatedcrossvalidationNumberoffolds": 10,
    "LinearCombinationMethodsScoringResamplingmethodRepeatedcrossvalidationNumberofrepeats": 5,
    "LinearCombinationMethodsStandardizationmethod": "None",
    "LinearCombinationMethodsSuLiuResamplingmethod": "None",
    "LinearCombinationMethodsSuLiuResamplingmethodBootstrapNumberofresamplingiterations": 10,
    "LinearCombinationMethodsSuLiuResamplingmethodCrossvalidationNumberoffolds": 10,
    "LinearCombinationMethodsSuLiuResamplingmethodRepeatedcrossvalidationNumberoffolds": 10,
    "LinearCombinationMethodsSuLiuResamplingmethodRepeatedcrossvalidationNumberofrepeats": 5,
    "LinearCombinationMethodsTodorSaplacanResamplingmethod": "None",
    "LinearCombinationMethodsTodorSaplacanResamplingmethodBootstrapNumberofresamplingiterations": 10,
    "LinearCombinationMethodsTodorSaplacanResamplingmethodCrossvalidationNumberoffolds": 10,
    "LinearCombinationMethodsTodorSaplacanResamplingmethodRepeatedcrossvalidationNumberoffolds": 10,
    "LinearCombinationMethodsTodorSaplacanResamplingmethodRepeatedcrossvalidationNumberofrepeats": 5,
    "MachineLearningAlgorithmsDataPreprocessing": "None",
    "MachineLearningAlgorithmsResamplingmethod": "None",
    "MachineLearningAlgorithmsResamplingmethodNumberoffoldsAdaptivebootstrap": 10,
    "MachineLearningAlgorithmsResamplingmethodNumberoffoldsAdaptivecrossvalidation": 10,
    "MachineLearningAlgorithmsResamplingmethodNumberoffoldsAdaptiveLGOCV": 10,
    "MachineLearningAlgorithmsResamplingmethodNumberoffoldsCrossvalidation": 10,
    "MachineLearningAlgorithmsResamplingmethodNumberoffoldsLGOCV": 10,
    "MachineLearningAlgorithmsResamplingmethodNumberoffoldsLOOCV": 10,
    "MachineLearningAlgorithmsResamplingmethodNumberoffoldsOOB": 10,
    "MachineLearningAlgorithmsResamplingmethodNumberoffoldsRepeatedcrossvalidation": 10,
    "MachineLearningAlgorithmsResamplingmethodNumberofrepeatsRepeatedcrossvalidation": 5,
    "MachineLearningAlgorithmsResamplingmethodNumberofresamplingiterationsBoot632": 10,
    "MachineLearningAlgorithmsResamplingmethodNumberofresamplingiterationsBootall": 10,
    "MachineLearningAlgorithmsResamplingmethodNumberofresamplingiterationsBootstrap": 10,
    "MachineLearningAlgorithmsResamplingmethodNumberofresamplingiterationsOptimismboot": 10,
    "MathematicalOperatorsDistancemeasuresDistancemeasures": "Euclidean",
    "MathematicalOperatorsStandardizationmethod": "None",
    "MathematicalOperatorsTransformation": "None",
    "methods": "Scoring",
    "modelUpload": null,
    "newUpload": null,
    "NonlinearCombinationMethodsElasticNetRegressionIncludeofinteraction": "TRUE",
    "NonlinearCombinationMethodsElasticNetRegressionMixingparameter": 0.5,
    "NonlinearCombinationMethodsElasticNetRegressionNumberofdegreesmarker1": 3,
    "NonlinearCombinationMethodsElasticNetRegressionNumberofdegreesmarker2": 3,
    "NonlinearCombinationMethodsElasticNetRegressionResamplingmethod": "None",
    "NonlinearCombinationMethodsElasticNetRegressionResamplingmethodBootstrapNumberofresamplingiterations": 10,
    "NonlinearCombinationMethodsElasticNetRegressionResamplingmethodCrossvalidationNumberoffolds": 10,
    "NonlinearCombinationMethodsElasticNetRegressionResamplingmethodRepeatedcrossvalidationNumberoffolds": 10,
    "NonlinearCombinationMethodsElasticNetRegressionResamplingmethodRepeatedcrossvalidationNumberofrepeats": 5,
    "NonlinearCombinationMethodsLassoRegressionIncludeofinteraction": "TRUE",
    "NonlinearCombinationMethodsLassoRegressionNumberofdegreesmarker1": 3,
    "NonlinearCombinationMethodsLassoRegressionNumberofdegreesmarker2": 3,
    "NonlinearCombinationMethodsLassoRegressionResamplingmethod": "None",
    "NonlinearCombinationMethodsLassoRegressionResamplingmethodBootstrapNumberofresamplingiterations": 10,
    "NonlinearCombinationMethodsLassoRegressionResamplingmethodCrossvalidationNumberoffolds": 10,
    "NonlinearCombinationMethodsLassoRegressionResamplingmethodRepeatedcrossvalidationNumberoffolds": 10,
    "NonlinearCombinationMethodsLassoRegressionResamplingmethodRepeatedcrossvalidationNumberofrepeats": 5,
    "NonlinearCombinationMethodsNaturalCubicSplinesNumberofdegreesoffreedomformarker1": 4,
    "NonlinearCombinationMethodsNaturalCubicSplinesNumberofdegreesoffreedomformarker2": 4,
    "NonlinearCombinationMethodsNaturalCubicSplinesResamplingmethod": "None",
    "NonlinearCombinationMethodsNaturalCubicSplinesResamplingmethodBootstrapNumberofresamplingiterations": 10,
    "NonlinearCombinationMethodsNaturalCubicSplinesResamplingmethodCrossvalidationNumberoffolds": 10,
    "NonlinearCombinationMethodsNaturalCubicSplinesResamplingmethodRepeatedcrossvalidationNumberoffolds": 10,
    "NonlinearCombinationMethodsNaturalCubicSplinesResamplingmethodRepeatedcrossvalidationNumberofrepeats": 5,
    "NonlinearCombinationMethodsPolynomialRegressionIncludeofinteraction": "TRUE",
    "NonlinearCombinationMethodsPolynomialRegressionNumberofdegreesmarker1": 3,
    "NonlinearCombinationMethodsPolynomialRegressionNumberofdegreesmarker2": 3,
    "NonlinearCombinationMethodsPolynomialRegressionResamplingmethod": "None",
    "NonlinearCombinationMethodsPolynomialRegressionResamplingmethodBootstrapNumberofresamplingiterations": 10,
    "NonlinearCombinationMethodsPolynomialRegressionResamplingmethodCrossvalidationNumberoffolds": 10,
    "NonlinearCombinationMethodsPolynomialRegressionResamplingmethodRepeatedcrossvalidationNumberoffolds": 10,
    "NonlinearCombinationMethodsPolynomialRegressionResamplingmethodRepeatedcrossvalidationNumberofrepeats": 5,
    "NonlinearCombinationMethodsRidgeRegressionIncludeofinteraction": "TRUE",
    "NonlinearCombinationMethodsRidgeRegressionNumberofdegreesmarker1": 3,
    "NonlinearCombinationMethodsRidgeRegressionNumberofdegreesmarker2": 3,
    "NonlinearCombinationMethodsRidgeRegressionResamplingmethod": "None",
    "NonlinearCombinationMethodsRidgeRegressionResamplingmethodBootstrapNumberofresamplingiterations": 10,
    "NonlinearCombinationMethodsRidgeRegressionResamplingmethodCrossvalidationNumberoffolds": 10,
    "NonlinearCombinationMethodsRidgeRegressionResamplingmethodRepeatedcrossvalidationNumberoffolds": 10,
    "NonlinearCombinationMethodsRidgeRegressionResamplingmethodRepeatedcrossvalidationNumberofrepeats": 5,
    "NonlinearCombinationMethodsSmoothingSplinesNumberofdegreesoffreedomformarker1": 4,
    "NonlinearCombinationMethodsSmoothingSplinesNumberofdegreesoffreedomformarker2": 4,
    "NonlinearCombinationMethodsSmoothingSplinesResamplingmethod": "None",
    "NonlinearCombinationMethodsSmoothingSplinesResamplingmethodBootstrapNumberofresamplingiterations": 10,
    "NonlinearCombinationMethodsSmoothingSplinesResamplingmethodCrossvalidationNumberoffolds": 10,
    "NonlinearCombinationMethodsSmoothingSplinesResamplingmethodRepeatedcrossvalidationNumberoffolds": 10,
    "NonlinearCombinationMethodsSmoothingSplinesResamplingmethodRepeatedcrossvalidationNumberofrepeats": 5,
    "NonlinearCombinationMethodsSplinesNumberofdegreesmarker1": 3,
    "NonlinearCombinationMethodsSplinesNumberofdegreesmarker2": 3,
    "NonlinearCombinationMethodsSplinesNumberofdegreesoffreedomformarker1": 4,
    "NonlinearCombinationMethodsSplinesNumberofdegreesoffreedomformarker2": 4,
    "NonlinearCombinationMethodsSplinesResamplingmethod": "None",
    "NonlinearCombinationMethodsSplinesResamplingmethodBootstrapNumberofresamplingiterations": 10,
    "NonlinearCombinationMethodsSplinesResamplingmethodCrossvalidationNumberoffolds": 10,
    "NonlinearCombinationMethodsSplinesResamplingmethodRepeatedcrossvalidationNumberoffolds": 10,
    "NonlinearCombinationMethodsSplinesResamplingmethodRepeatedcrossvalidationNumberofrepeats": 5,
    "NonlinearCombinationMethodsStandardizationmethod": "None",
    "printDistplot2Btn": 0,
    "printDistplot3Btn": 0,
    "printDistplotCBtn": 0,
    "printRocBtn": 0,
    "printSctplot2Btn": 0,
    "printSctplot3Btn": 0,
    "printSctplotCBtn": 0,
    "printSenSpeplot3Btn": 0,
    "printSensSpeplot2Btn": 0,
    "printSensSpeplotCBtn": 0,
    "sampleData": "1",
    "selectMarker1": "",
    "selectMarker2": "",
    "selectMarker3": "",
    "selectMarker4": "",
    "selectStatus1": "",
    "selectStatus2": "",
    "tabGroupCoordinates": "Combination Score",
    "tabGroupCutPoints": "Combination Score",
    "tabGroupDiagStat": "Combination Score",
    "tabGroupdistribution": "Combination Score",
    "tabGroupPlot": "Results",
    "tabGroupres": "Data Upload",
    "tabGroupSctplot2": "Combination Score",
    "tabGroupSensSpeplot2": "Combination Score",
    "upload": null,
    "uploadModel": false
  },
  "output": {
    "AUCTable": {
      "x": {
        "filter": "none",
        "vertical": false,
        "extensions": [
          "Buttons"
        ],
        "container": "<table class=\"display\">\n  <thead>\n    <tr>\n      <th> <\/th>\n      <th>AUC<\/th>\n      <th>SE.AUC<\/th>\n      <th>LowerLimit<\/th>\n      <th>UpperLimit<\/th>\n      <th>z<\/th>\n      <th>p.value<\/th>\n    <\/tr>\n  <\/thead>\n<\/table>",
        "options": {
          "dom": "Blfrtip",
          "buttons": [
            "copy",
            "csv",
            "excel",
            "pdf",
            "print"
          ],
          "lengthMenu": [
            [
              10,
              30,
              50,
              -1
            ],
            [
              "10",
              "30",
              "50",
              "All"
            ]
          ],
          "paging": true,
          "columnDefs": [
            {
              "className": "dt-center",
              "targets": [
                1,
                2,
                3,
                4,
                5
              ]
            },
            {
              "className": "dt-right",
              "targets": 6
            },
            {
              "orderable": false,
              "targets": 0
            }
          ],
          "order": [

          ],
          "autoWidth": false,
          "orderClasses": false,
          "ajax": {
            "type": "POST",
            "data": "function(d) {\nd.search.caseInsensitive = true;\nd.search.smart = true;\nd.escape = true;\nvar encodeAmp = function(x) { x.value = x.value.replace(/&/g, \"%26\"); }\nencodeAmp(d.search);\n$.each(d.columns, function(i, v) {encodeAmp(v.search);});\n}"
          },
          "serverSide": true,
          "processing": true
        },
        "selection": {
          "mode": "multiple",
          "selected": null,
          "target": "row",
          "selectable": null
        }
      },
      "evals": [
        "options.ajax.data"
      ],
      "jsHooks": [

      ],
      "deps": [
        {
          "name": "jquery",
          "version": "3.6.0",
          "src": {
            "href": "jquery-3.6.0"
          },
          "meta": null,
          "script": "jquery-3.6.0.min.js",
          "stylesheet": null,
          "head": null,
          "attachment": null,
          "all_files": true
        },
        {
          "name": "dt-core",
          "version": "1.12.1",
          "src": {
            "href": "dt-core-1.12.1"
          },
          "meta": null,
          "script": "js/jquery.dataTables.min.js",
          "stylesheet": [
            "css/jquery.dataTables.min.css",
            "css/jquery.dataTables.extra.css"
          ],
          "head": null,
          "attachment": null,
          "package": null,
          "all_files": false
        },
        {
          "name": "jszip",
          "version": "1.12.1",
          "src": {
            "href": "jszip-1.12.1"
          },
          "meta": null,
          "script": "jszip.min.js",
          "stylesheet": null,
          "head": null,
          "attachment": null,
          "package": null,
          "all_files": false
        },
        {
          "name": "pdfmake",
          "version": "1.12.1",
          "src": {
            "href": "pdfmake-1.12.1"
          },
          "meta": null,
          "script": [
            "pdfmake.js",
            "vfs_fonts.js"
          ],
          "stylesheet": null,
          "head": null,
          "attachment": null,
          "package": null,
          "all_files": false
        },
        {
          "name": "dt-ext-buttons",
          "version": "1.12.1",
          "src": {
            "href": "dt-ext-buttons-1.12.1"
          },
          "meta": null,
          "script": [
            "js/dataTables.buttons.min.js",
            "js/buttons.html5.min.js",
            "js/buttons.colVis.min.js",
            "js/buttons.print.min.js"
          ],
          "stylesheet": "css/buttons.dataTables.min.css",
          "head": null,
          "attachment": null,
          "package": null,
          "all_files": false
        },
        {
          "name": "crosstalk",
          "version": "1.2.0",
          "src": {
            "href": "crosstalk-1.2.0"
          },
          "meta": null,
          "script": "js/crosstalk.min.js",
          "stylesheet": "css/crosstalk.min.css",
          "head": null,
          "attachment": null,
          "all_files": true
        }
      ]
    },
    "RawData": [
      "'data' must be 2-dimensional (e.g. data frame or matrix)",
      "c(\"(function (data, options = list(), class = \\\"display\\\", callback = JS(\\\"return table;\\\"), \", \"    rownames, colnames, container, caption = NULL, filter = c(\\\"none\\\", \", \"        \\\"bottom\\\", \\\"top\\\"), escape = TRUE, style = \\\"auto\\\", width = NULL, \", \"    height = NULL, elementId = NULL, fillContainer = getOption(\\\"DT.fillContainer\\\", \", \"        NULL), autoHideNavigation = getOption(\\\"DT.autoHideNavigation\\\", \", \"        NULL), selection = c(\\\"multiple\\\", \\\"single\\\", \\\"none\\\"), extensions = list(), \", \n\"    plugins = NULL, editable = FALSE) \", \"{\", \"    oop = base::options(stringsAsFactors = FALSE)\", \"    on.exit(base::options(oop), add = TRUE)\", \"    options = modifyList(getOption(\\\"DT.options\\\", list()), if (is.function(options)) \", \"        options()\", \"    else options)\", \"    if (is.character(btnOpts <- options[[\\\"buttons\\\"]])) \", \"        options[[\\\"buttons\\\"]] = as.list(btnOpts)\", \"    params = list()\", \"    attr(params, \\\"TOJSON_ARGS\\\") = getOption(\\\"DT.TOJSON_ARGS\\\")\", \"    if (crosstalk::is.SharedData(data)) {\", \n\"        params$crosstalkOptions = list(key = data$key(), group = data$groupName())\", \"        data = data$data(withSelection = FALSE, withFilter = TRUE, \", \"            withKey = FALSE)\", \"    }\", \"    rn = if (missing(rownames) || isTRUE(rownames)) \", \"        base::rownames(data)\", \"    else {\", \"        if (is.character(rownames)) \", \"            rownames\", \"    }\", \"    hideDataTable = FALSE\", \"    if (is.null(data) || identical(ncol(data), 0L)) {\", \"        data = matrix(ncol = 0, nrow = NROW(data))\", \n\"        hideDataTable = TRUE\", \"    }\", \"    else if (length(dim(data)) != 2) {\", \"        str(data)\", \"        stop(\\\"'data' must be 2-dimensional (e.g. data frame or matrix)\\\")\", \"    }\", \"    if (is.data.frame(data)) {\", \"        data = as.data.frame(data)\", \"        numc = unname(which(vapply(data, is.numeric, logical(1))))\", \"    }\", \"    else {\", \"        if (!is.matrix(data)) \", \"            stop(\\\"'data' must be either a matrix or a data frame, and cannot be \\\", \", \"                classes(data), \\\" (you may need to coerce it to matrix or data frame)\\\")\", \n\"        numc = if (is.numeric(data)) \", \"            seq_len(ncol(data))\", \"        data = as.data.frame(data)\", \"    }\", \"    if (!is.null(rn)) {\", \"        data = cbind(` ` = rn, data)\", \"        numc = numc + 1\", \"    }\", \"    options[[\\\"columnDefs\\\"]] = colDefsTgtHandle(options[[\\\"columnDefs\\\"]], \", \"        base::colnames(data))\", \"    data = boxListColumnAtomicScalars(data)\", \"    if (length(numc)) {\", \"        undefined_numc = setdiff(numc - 1, classNameDefinedColumns(options, \", \"            ncol(data)))\", \n\"        if (length(undefined_numc)) \", \"            options = appendColumnDefs(options, list(className = \\\"dt-right\\\", \", \"                targets = undefined_numc))\", \"    }\", \"    if (is.null(options[[\\\"order\\\"]])) \", \"        options$order = list()\", \"    if (is.null(options[[\\\"autoWidth\\\"]])) \", \"        options$autoWidth = FALSE\", \"    if (is.null(options[[\\\"orderClasses\\\"]])) \", \"        options$orderClasses = FALSE\", \"    cn = base::colnames(data)\", \"    if (missing(colnames)) {\", \"        colnames = cn\", \n\"    }\", \"    else if (!is.null(names(colnames))) {\", \"        i = convertIdx(colnames, cn)\", \"        cn[i] = names(colnames)\", \"        colnames = cn\", \"    }\", \"    if (ncol(data) - length(colnames) == 1) \", \"        colnames = c(\\\" \\\", colnames)\", \"    if (length(colnames) && colnames[1] == \\\" \\\") \", \"        options = appendColumnDefs(options, list(orderable = FALSE, \", \"            targets = 0))\", \"    style = normalizeStyle(style)\", \"    if (grepl(\\\"^bootstrap\\\", style)) \", \"        class = DT2BSClass(class)\", \n\"    if (style != \\\"default\\\") \", \"        params$style = style\", \"    if (isTRUE(fillContainer)) \", \"        class = paste(class, \\\"fill-container\\\")\", \"    if (is.character(filter)) \", \"        filter = list(position = match.arg(filter))\", \"    filter = modifyList(list(position = \\\"none\\\", clear = TRUE, \", \"        plain = FALSE, vertical = FALSE, opacity = 1), filter)\", \"    filterHTML = as.character(filterRow(data, !is.null(rn) && \", \"        colnames[1] == \\\" \\\", filter))\", \"    if (filter$position == \\\"top\\\") \", \n\"        options$orderCellsTop = TRUE\", \"    params$filter = filter$position\", \"    params$vertical = filter$vertical\", \"    if (filter$position != \\\"none\\\") \", \"        params$filterHTML = filterHTML\", \"    if (missing(container)) {\", \"        container = tags$table(tableHeader(colnames, escape), \", \"            class = class)\", \"    }\", \"    else {\", \"        params$class = class\", \"    }\", \"    attr(options, \\\"escapeIdx\\\") = escapeToConfig(escape, colnames)\", \"    if (is.list(extensions)) {\", \n\"        extensions = names(extensions)\", \"    }\", \"    else if (!is.character(extensions)) {\", \"        stop(\\\"'extensions' must be either a character vector or a named list\\\")\", \"    }\", \"    params$extensions = if (length(extensions)) \", \"        as.list(extensions)\", \"    if (\\\"Responsive\\\" %in% extensions && is.null(options$responsive)) {\", \"        options$responsive = TRUE\", \"    }\", \"    params$caption = captionString(caption)\", \"    if (isTRUE(editable)) \", \"        editable = \\\"cell\\\"\", \n\"    if (is.character(editable)) \", \"        editable = list(target = editable, disable = list(columns = NULL))\", \"    if (is.list(editable)) {\", \"        editable$numeric = makeEditableNumericField(editable$numeric, \", \"            data, rn)\", \"        editable$area = makeEditableAreaField(editable$area, \", \"            data, rn)\", \"        params$editable = editable\", \"    }\", \"    if (!identical(class(callback), class(JS(\\\"\\\")))) \", \"        stop(\\\"The 'callback' argument only accept a value returned from JS()\\\")\", \n\"    if (length(options$pageLength) && length(options$lengthMenu) == \", \"        0) {\", \"        if (!isFALSE(options$lengthChange)) \", \"            options$lengthMenu = sort(unique(c(options$pageLength, \", \"                10, 25, 50, 100)))\", \"        if (identical(options$lengthMenu, c(10, 25, 50, 100))) \", \"            options$lengthMenu = NULL\", \"    }\", \"    if (!is.null(options[[\\\"search\\\"]]) && !is.list(options[[\\\"search\\\"]])) \", \"        stop(\\\"The value of `search` in `options` must be NULL or a list\\\")\", \n\"    if (!is.null(fillContainer)) \", \"        params$fillContainer = fillContainer\", \"    if (!is.null(autoHideNavigation)) {\", \"        if (isTRUE(autoHideNavigation) && length(options$pageLength) == \", \"            0L) \", \"            warning(\\\"`autoHideNavigation` will be ignored if the `pageLength` option is not provided.\\\", \", \"                immediate. = TRUE)\", \"        params$autoHideNavigation = autoHideNavigation\", \"    }\", \"    params = structure(modifyList(params, list(data = data, container = as.character(container), \", \n\"        options = options, callback = if (!missing(callback)) JS(\\\"function(table) {\\\", \", \"            callback, \\\"}\\\"))), colnames = cn, rownames = length(rn) > \", \"        0)\", \"    if (inShiny() || length(params$crosstalkOptions)) {\", \"        if (is.character(selection)) {\", \"            selection = list(mode = match.arg(selection))\", \"        }\", \"        selection = modifyList(list(mode = \\\"multiple\\\", selected = NULL, \", \"            target = \\\"row\\\", selectable = NULL), selection, keep.null = TRUE)\", \n\"        if (grepl(\\\"^row\\\", selection$target) && is.character(selection$selected) && \", \"            length(rn)) {\", \"            selection$selected = match(selection$selected, rn)\", \"        }\", \"        params$selection = validateSelection(selection)\", \"        if (\\\"Select\\\" %in% extensions && selection$mode != \\\"none\\\") \", \"            warning(\\\"The Select extension can't work properly with DT's own \\\", \", \"                \\\"selection implemention and is only recommended in the client mode. \\\", \", \n\"                \\\"If you really want to use the Select extension please set \\\", \", \"                \\\"`selection = 'none'`\\\", immediate. = TRUE)\", \"    }\", \"    deps = DTDependencies(style)\", \"    deps = c(deps, unlist(lapply(extensions, extDependency, style, \", \"        options), recursive = FALSE))\", \"    if (params$filter != \\\"none\\\") \", \"        deps = c(deps, filterDependencies())\", \"    if (isTRUE(options$searchHighlight)) \", \"        deps = c(deps, list(pluginDependency(\\\"searchHighlight\\\")))\", \n\"    if (length(plugins)) \", \"        deps = c(deps, lapply(plugins, pluginDependency))\", \"    deps = c(deps, crosstalk::crosstalkLibs())\", \"    if (isTRUE(fillContainer)) {\", \"        width = NULL\", \"        height = NULL\", \"    }\", \"    htmlwidgets::createWidget(\\\"datatables\\\", if (hideDataTable) \", \"        NULL\", \"    else params, package = \\\"DT\\\", width = width, height = height, \", \"        elementId = elementId, sizingPolicy = htmlwidgets::sizingPolicy(knitr.figure = FALSE, \", \"            defaultWidth = \\\"100%\\\", defaultHeight = \\\"auto\\\"), dependencies = deps, \", \n\"        preRenderHook = function(instance) {\", \"            data = instance[[\\\"x\\\"]][[\\\"data\\\"]]\", \"            if (object.size(data) > 1500000 && getOption(\\\"DT.warn.size\\\", \", \"                TRUE)) \", \"                warning(\\\"It seems your data is too big for client-side DataTables. You may \\\", \", \"                  \\\"consider server-side processing: https://rstudio.github.io/DT/server.html\\\")\", \"            data = escapeData(data, escape, colnames)\", \"            data = unname(data)\", \"            instance$x$data = data\", \n\"            instance\", \"        })\", \"})(function (..., list = character(), package = NULL, lib.loc = NULL, \", \"    verbose = getOption(\\\"verbose\\\"), envir = .GlobalEnv, overwrite = TRUE) \", \"{\", \"    fileExt <- function(x) {\", \"        db <- grepl(\\\"\\\\\\\\.[^.]+\\\\\\\\.(gz|bz2|xz)$\\\", x)\", \"        ans <- sub(\\\".*\\\\\\\\.\\\", \\\"\\\", x)\", \"        ans[db] <- sub(\\\".*\\\\\\\\.([^.]+\\\\\\\\.)(gz|bz2|xz)$\\\", \\\"\\\\\\\\1\\\\\\\\2\\\", \", \"            x[db])\", \"        ans\", \"    }\", \"    my_read_table <- function(...) {\", \"        lcc <- Sys.getlocale(\\\"LC_COLLATE\\\")\", \n\"        on.exit(Sys.setlocale(\\\"LC_COLLATE\\\", lcc))\", \"        Sys.setlocale(\\\"LC_COLLATE\\\", \\\"C\\\")\", \"        read.table(...)\", \"    }\", \"    stopifnot(is.character(list))\", \"    names <- c(as.character(substitute(list(...))[-1L]), list)\", \"    if (!is.null(package)) {\", \"        if (!is.character(package)) \", \"            stop(\\\"'package' must be a character vector or NULL\\\")\", \"    }\", \"    paths <- find.package(package, lib.loc, verbose = verbose)\", \"    if (is.null(lib.loc)) \", \"        paths <- c(path.package(package, TRUE), if (!length(package)) getwd(), \", \n\"            paths)\", \"    paths <- unique(normalizePath(paths[file.exists(paths)]))\", \"    paths <- paths[dir.exists(file.path(paths, \\\"data\\\"))]\", \"    dataExts <- tools:::.make_file_exts(\\\"data\\\")\", \"    if (length(names) == 0L) {\", \"        db <- matrix(character(), nrow = 0L, ncol = 4L)\", \"        for (path in paths) {\", \"            entries <- NULL\", \"            packageName <- if (file_test(\\\"-f\\\", file.path(path, \", \"                \\\"DESCRIPTION\\\"))) \", \"                basename(path)\", \n\"            else \\\".\\\"\", \"            if (file_test(\\\"-f\\\", INDEX <- file.path(path, \\\"Meta\\\", \", \"                \\\"data.rds\\\"))) {\", \"                entries <- readRDS(INDEX)\", \"            }\", \"            else {\", \"                dataDir <- file.path(path, \\\"data\\\")\", \"                entries <- tools::list_files_with_type(dataDir, \", \"                  \\\"data\\\")\", \"                if (length(entries)) {\", \"                  entries <- unique(tools::file_path_sans_ext(basename(entries)))\", \n\"                  entries <- cbind(entries, \\\"\\\")\", \"                }\", \"            }\", \"            if (NROW(entries)) {\", \"                if (is.matrix(entries) && ncol(entries) == 2L) \", \"                  db <- rbind(db, cbind(packageName, dirname(path), \", \"                    entries))\", \"                else warning(gettextf(\\\"data index for package %s is invalid and will be ignored\\\", \", \"                  sQuote(packageName)), domain = NA, call. = FALSE)\", \"            }\", \"        }\", \n\"        colnames(db) <- c(\\\"Package\\\", \\\"LibPath\\\", \\\"Item\\\", \\\"Title\\\")\", \"        footer <- if (missing(package)) \", \"            paste0(\\\"Use \\\", sQuote(paste(\\\"data(package =\\\", \\\".packages(all.available = TRUE))\\\")), \", \"                \\\"\\\\n\\\", \\\"to list the data sets in all *available* packages.\\\")\", \"        else NULL\", \"        y <- list(title = \\\"Data sets\\\", header = NULL, results = db, \", \"            footer = footer)\", \"        class(y) <- \\\"packageIQR\\\"\", \"        return(y)\", \"    }\", \n\"    paths <- file.path(paths, \\\"data\\\")\", \"    for (name in names) {\", \"        found <- FALSE\", \"        for (p in paths) {\", \"            tmp_env <- if (overwrite) \", \"                envir\", \"            else new.env()\", \"            if (file_test(\\\"-f\\\", file.path(p, \\\"Rdata.rds\\\"))) {\", \"                rds <- readRDS(file.path(p, \\\"Rdata.rds\\\"))\", \"                if (name %in% names(rds)) {\", \"                  found <- TRUE\", \"                  if (verbose) \", \"                    message(sprintf(\\\"name=%s:\\\\t found in Rdata.rds\\\", \", \n\"                      name), domain = NA)\", \"                  thispkg <- sub(\\\".*/([^/]*)/data$\\\", \\\"\\\\\\\\1\\\", p)\", \"                  thispkg <- sub(\\\"_.*$\\\", \\\"\\\", thispkg)\", \"                  thispkg <- paste0(\\\"package:\\\", thispkg)\", \"                  objs <- rds[[name]]\", \"                  lazyLoad(file.path(p, \\\"Rdata\\\"), envir = tmp_env, \", \"                    filter = function(x) x %in% objs)\", \"                  break\", \"                }\", \"                else if (verbose) \", \"                  message(sprintf(\\\"name=%s:\\\\t NOT found in names() of Rdata.rds, i.e.,\\\\n\\\\t%s\\\\n\\\", \", \n\"                    name, paste(names(rds), collapse = \\\",\\\")), \", \"                    domain = NA)\", \"            }\", \"            if (file_test(\\\"-f\\\", file.path(p, \\\"Rdata.zip\\\"))) {\", \"                warning(\\\"zipped data found for package \\\", sQuote(basename(dirname(p))), \", \"                  \\\".\\\\nThat is defunct, so please re-install the package.\\\", \", \"                  domain = NA)\", \"                if (file_test(\\\"-f\\\", fp <- file.path(p, \\\"filelist\\\"))) \", \"                  files <- file.path(p, scan(fp, what = \\\"\\\", quiet = TRUE))\", \n\"                else {\", \"                  warning(gettextf(\\\"file 'filelist' is missing for directory %s\\\", \", \"                    sQuote(p)), domain = NA)\", \"                  next\", \"                }\", \"            }\", \"            else {\", \"                files <- list.files(p, full.names = TRUE)\", \"            }\", \"            files <- files[grep(name, files, fixed = TRUE)]\", \"            if (length(files) > 1L) {\", \"                o <- match(fileExt(files), dataExts, nomatch = 100L)\", \n\"                paths0 <- dirname(files)\", \"                paths0 <- factor(paths0, levels = unique(paths0))\", \"                files <- files[order(paths0, o)]\", \"            }\", \"            if (length(files)) {\", \"                for (file in files) {\", \"                  if (verbose) \", \"                    message(\\\"name=\\\", name, \\\":\\\\t file= ...\\\", .Platform$file.sep, \", \"                      basename(file), \\\"::\\\\t\\\", appendLF = FALSE, \", \"                      domain = NA)\", \"                  ext <- fileExt(file)\", \n\"                  if (basename(file) != paste0(name, \\\".\\\", ext)) \", \"                    found <- FALSE\", \"                  else {\", \"                    found <- TRUE\", \"                    zfile <- file\", \"                    zipname <- file.path(dirname(file), \\\"Rdata.zip\\\")\", \"                    if (file.exists(zipname)) {\", \"                      Rdatadir <- tempfile(\\\"Rdata\\\")\", \"                      dir.create(Rdatadir, showWarnings = FALSE)\", \"                      topic <- basename(file)\", \n\"                      rc <- .External(C_unzip, zipname, topic, \", \"                        Rdatadir, FALSE, TRUE, FALSE, FALSE)\", \"                      if (rc == 0L) \", \"                        zfile <- file.path(Rdatadir, topic)\", \"                    }\", \"                    if (zfile != file) \", \"                      on.exit(unlink(zfile))\", \"                    switch(ext, R = , r = {\", \"                      library(\\\"utils\\\")\", \"                      sys.source(zfile, chdir = TRUE, envir = tmp_env)\", \n\"                    }, RData = , rdata = , rda = load(zfile, \", \"                      envir = tmp_env), TXT = , txt = , tab = , \", \"                      tab.gz = , tab.bz2 = , tab.xz = , txt.gz = , \", \"                      txt.bz2 = , txt.xz = assign(name, my_read_table(zfile, \", \"                        header = TRUE, as.is = FALSE), envir = tmp_env), \", \"                      CSV = , csv = , csv.gz = , csv.bz2 = , \", \"                      csv.xz = assign(name, my_read_table(zfile, \", \"                        header = TRUE, sep = \\\";\\\", as.is = FALSE), \", \n\"                        envir = tmp_env), found <- FALSE)\", \"                  }\", \"                  if (found) \", \"                    break\", \"                }\", \"                if (verbose) \", \"                  message(if (!found) \", \"                    \\\"*NOT* \\\", \\\"found\\\", domain = NA)\", \"            }\", \"            if (found) \", \"                break\", \"        }\", \"        if (!found) {\", \"            warning(gettextf(\\\"data set %s not found\\\", sQuote(name)), \", \"                domain = NA)\", \n\"        }\", \"        else if (!overwrite) {\", \"            for (o in ls(envir = tmp_env, all.names = TRUE)) {\", \"                if (exists(o, envir = envir, inherits = FALSE)) \", \"                  warning(gettextf(\\\"an object named %s already exists and will not be overwritten\\\", \", \"                    sQuote(o)))\", \"                else assign(o, get(o, envir = tmp_env, inherits = FALSE), \", \"                  envir = envir)\", \"            }\", \"            rm(tmp_env)\", \"        }\", \"    }\", \n\"    invisible(names)\", \"}, extensions = \\\"Buttons\\\", options = list(dom = \\\"Blfrtip\\\", buttons = c(\\\"copy\\\", \", \"\\\"csv\\\", \\\"excel\\\", \\\"pdf\\\", \\\"print\\\"), lengthMenu = list(c(10, 30, \", \"50, -1), c(\\\"10\\\", \\\"30\\\", \\\"50\\\", \\\"All\\\")), paging = TRUE, columnDefs = list(\", \"    list(className = \\\"dt-center\\\", targets = \\\"_all\\\"))))\")",
      "NULL"
    ],
    "ROCplot": {
      "src": "[image data sha1: 2b1f97af182bfbbfcf5b64b8ec9b5acea2c3c1b3]",
      "width": 500,
      "height": 400,
      "alt": "Plot object",
      "coordmap": {
        "panels": [
          {
            "domain": {
              "left": 1.04,
              "right": -0.04,
              "bottom": -0.0400000000000001,
              "top": 1.04
            },
            "range": {
              "left": 109.04,
              "right": 419.76,
              "bottom": 339.96,
              "top": 29.24
            },
            "log": {
              "x": null,
              "y": null
            },
            "mapping": {

            }
          }
        ],
        "dims": {
          "width": 500,
          "height": 400
        }
      }
    }
  },
  "export": {

  }
}
